<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Windows.UI.Xaml.Media;
using Windows.UI;
using Windows.UI.Text;
using System.Reflection;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Media.Animation;

namespace XSRT2 {
    public static class Handler
    {
        <#
        ClassDef(
            "FrameworkElement", 
            false,
            null,
            new PropEntry[] { 
                new PropEntry() { Name="grid$row", SetBody="{ target.SetValue(Grid.RowProperty, Convert.ToInt32(x.Value<double>())); }" },
                new PropEntry() { Name="grid$column", SetBody="{ target.SetValue(Grid.ColumnProperty, Convert.ToInt32(x.Value<double>())); }" },

                RefAttachedProp("Above", "relative", "RelativePanel"),
                RefAttachedProp("AlignBottomWith", "relative", "RelativePanel"),
                BooleanAttachedProp("AlignBottomWithPanel", "relative", "RelativePanel" ),
                RefAttachedProp("AlignHorizontalCenterWith", "relative", "RelativePanel"),
                RefAttachedProp("AlignLeftWith", "relative", "RelativePanel"),
                BooleanAttachedProp("AlignLeftWithPanel", "relative", "RelativePanel" ),
                RefAttachedProp("AlignRightWith", "relative", "RelativePanel"),
                BooleanAttachedProp("AlignRightWithPanel", "relative", "RelativePanel" ),
                RefAttachedProp("AlignTopWith", "relative", "RelativePanel"),
                BooleanAttachedProp("AlignTopWithPanel", "relative", "RelativePanel" ),
                RefAttachedProp("AlignVerticalCenterWith", "relative", "RelativePanel"),
                BooleanAttachedProp("AlignVerticalCenterWithPanel", "relative", "RelativePanel" ),
                RefAttachedProp("Below", "relative", "RelativePanel"),
                RefAttachedProp("LeftOf", "relative", "RelativePanel"),
                RefAttachedProp("RightOf", "relative", "RelativePanel"),
                
                EnumProperty("HorizontalAlignment"),
                EnumProperty("VerticalAlignment"),
                XamlProperty("Margin", "Thickness"),
                new PropEntry() { Name="name", SetBody="{ target.Name = x.ToString(); namedObjectMap[target.Name] = target; }" }
            },
            null
        ); 
        #>

        <#
        ClassDef(
            "TextBlock",
            true,
            "FrameworkElement",
            new PropEntry[] {
                DefaultStringProp("Text"),
                BasicProp("FontFamily", "new FontFamily(x.ToString())"),
                DoubleProp("FontSize"),
                EnumProperty("FontWeight")
            },
            null
        );
        #>

        <#
        ClassDef(
            "TextBox",
            true,
            "Control",
            new PropEntry[] {
                DefaultStringProp("Text")
            },
            new EventEntry[] {
                new EventEntry() { Name="TextChanged", WinRTName="TextChanged", EventType="RoutedEventArgs" }
            }
        );
        #>

        <#
        ClassDef(
            "ListBox",
            true,
            "ItemsControl",
            new PropEntry[] {
            },
            new EventEntry[] {
                new EventEntry() { Name="SelectionChanged", WinRTName="SelectionChanged", EventType="SelectionChangedEventArgs" }
            }
        );
        #>

        <#
        ClassDef(
            "ItemsControl",
            true,
            "Control",
            new PropEntry[] {
                new PropEntry() { Name="itemsSource", SetBody="{ RuntimeHelpers.SetItemsSource(target, x); }" },
                new PropEntry() { Name="itemContainerTransitions", SetBody="{ RuntimeHelpers.SetItemContainerTransitions(target, x, lastX, namedObjectMap, defer); }" }
            },
            new EventEntry[] {
            }
        );
        #>

        <#
        ClassDef(
            "Slider",
            true,
            "Control",
            new PropEntry[] {
            DoubleProp("Minimum"),
            DoubleProp("Maximum"),
            DoubleProp("Value")
            },
            new EventEntry[] {
                new EventEntry() { Name="ValueChanged", WinRTName="ValueChanged", EventType="RangeBaseValueChangedEventArgs" }
            }
        );
        #>

        <# ClassDef("Button", true, "ButtonBase", null, null); #>
        <# ClassDef("CalendarDatePicker", true, "Control", null, null); #>
        <# ClassDef("CalendarView", true, "Control", null, null); #>
        <# ClassDef("RelativePanel", true, "Panel", null, null); #>
        <# ClassDef("RepositionThemeTransition", true, null, null, null); #>

        <#
        ClassDef(
            "CheckBox",
            true,
            "ButtonBase",
            new PropEntry[] {
            BooleanProp("IsChecked")
            },
            new EventEntry[] {
                new EventEntry() { Name="Checked", WinRTName="Checked", EventType="RoutedEventArgs" }
            }
        );
        #>

        <#
        ClassDef(
            "ButtonBase",
            false,
            "Control",
            new PropEntry[] {
                DefaultBasicProp("Content", "CreateFromState(x, lastX, namedObjectMap, defer)")
            },
            new EventEntry[] {
                new EventEntry() { Name="Click", WinRTName="Click", EventType="RoutedEventArgs" }
            }
        );
        #>

        <#
        ClassDef(
            "Control",
            false,
            "FrameworkElement",
            new PropEntry[] {
                XamlProperty("Background", "Brush"),
                XamlProperty("Foreground", "Brush"),
                BasicProp("FontFamily", "new FontFamily(x.ToString())"),
                DoubleProp("FontSize"),
                EnumProperty("FontWeight")
            },
            null
        );
        #>

        <# ClassDef("StackPanel", true, "Panel", null, null); #>
        <# 
        ClassDef(
            "Grid", 
            true, 
            "Panel", 
            new PropEntry[] {
                    new PropEntry() { Name="rows", SetBody="{ PanelHandler.SetGridRowDefinitions(target, (JArray)x); }" },
                    new PropEntry() { Name="columns", SetBody="{ PanelHandler.SetGridColumnDefinitions(target, (JArray)x); }" }
                },
                null
        ); 
        #>

        internal static class PanelHandler
        {
            internal static void SetGridRowDefinitions(Grid t, JArray obj) 
            {
                t.RowDefinitions.Clear();
                foreach (var d in obj.AsJEnumerable())
                {
                    RowDefinition rd = new RowDefinition();
                    rd.Height = XamlStringParse<GridLength>(d);
                    t.RowDefinitions.Add(rd);
                }
            }
            internal static void SetGridColumnDefinitions(Grid t, JArray obj) 
            {
                t.ColumnDefinitions.Clear();
                foreach (var d in obj.AsJEnumerable())
                {
                    ColumnDefinition cd = new ColumnDefinition();
                    cd.Width = XamlStringParse<GridLength>(d);
                    t.ColumnDefinitions.Add(cd);
                }
            }

            static void SetPanelChildren(Panel t, JObject obj, JObject lastObj, Dictionary<string, object> namedObjectMap, List<DeferSetter> defer)
            {
                Handler.FrameworkElementHandler.SetProperties(t, obj, lastObj, namedObjectMap, defer);
                List<UIElement> children = new List<UIElement>();
                IJEnumerable<JToken> lastChildren = null;
                JToken last;
                if (lastObj != null && lastObj.TryGetValue("children", out last))
                {
                    lastChildren = last.AsJEnumerable();
                }
                CollectPanelChildrenWorker(t, obj["children"].AsJEnumerable(), lastChildren, children, namedObjectMap, defer);
                var setChildrenNeeded = false;
                if (t.Children.Count == children.Count)
                {
                    for (int i = 0; i < children.Count; i++)
                    {
                        if (!object.ReferenceEquals(children[i], t.Children[i]))
                        {
                            setChildrenNeeded = true;
                        }
                    }
                }
                else
                {
                    setChildrenNeeded = true;
                }

                if (setChildrenNeeded)
                {
                    t.Children.Clear();
                    foreach (var child in children)
                    {
                        var parent = VisualTreeHelper.GetParent(child) as Panel;
                        if (parent != null)
                        {
                            parent.Children.Remove(child);
                        }
                        t.Children.Add(child);
                    }
                }
            }
            static void CollectPanelChildrenWorker(Panel t, IJEnumerable<JToken> items, IEnumerable<JToken> lastItems, List<UIElement> children, Dictionary<string, object> namedObjectMap, List<DeferSetter> defer)
            {
                IEnumerator<JToken> enumerator = null;
                if (lastItems != null)
                {
                    enumerator = lastItems.GetEnumerator();
                    enumerator.Reset();
                }
                foreach (var child in items)
                {
                    JToken lastChild = null;
                    if (enumerator != null && enumerator.MoveNext()) { lastChild = enumerator.Current; }

                    if (child.Type == JTokenType.Array)
                    {
                        CollectPanelChildrenWorker(t, child.AsJEnumerable(), lastChild != null ? lastChild.AsJEnumerable() : null, children, namedObjectMap, defer);
                    }
                    else
                    {
                        var instance = CreateFromState((JObject)child, lastChild as JObject, namedObjectMap, defer);
                        children.Add((FrameworkElement)instance);
                    }
                }
            }
            internal static void SetProperties(Panel t, JObject obj, JObject lastObj, Dictionary<string, object> namedObjectMap, List<DeferSetter> defer)
            {
                FrameworkElementHandler.SetProperties(t, obj, lastObj, namedObjectMap, defer);
                SetPanelChildren(t, obj, lastObj, namedObjectMap, defer);
                TrySet(obj, lastObj, "childrenTransitions", false, t, (target, x, lastX) => { RuntimeHelpers.SetChildrenTransitions(target, x, lastX, namedObjectMap, defer); });
            }

        }


        static DependencyProperty eventMap = DependencyProperty.RegisterAttached("XSEventMap", typeof(Dictionary<string, string>), typeof(FrameworkElement), PropertyMetadata.Create((object)null));
        static Dictionary<string, CreateCallback> handlers;

        public static event EventHandler<CommandEventArgs> Command;

        static Tuple<bool, T> CreateOrGetLast<T>(JObject obj, Dictionary<string, object> namedObjectMap) where T:new()
        {
            JToken name;
            if (obj.TryGetValue("name", out name))
            {
                object value;
                if (namedObjectMap.TryGetValue(name.ToString(), out value))
                {
                    if (value != null && value is T)
                    {
                        return new Tuple<bool, T>(true, (T)value);
                    }
                }
            }
            return new Tuple<bool, T>(false, new T());
        }
        static void TrySet<T>(JObject obj, JObject last, string name, T target, Setter<T> setter)
        {
            TrySet<T>(obj, last, name, false, target, setter);
        }
        static void TrySet<T>(JObject obj, JObject last, string name, bool aliasFirstChild, T target, Setter<T> setter)
        {
            TrySet<T>(obj, last, name, aliasFirstChild, target, setter, null);
        }
        static void TrySet<T>(JObject obj, JObject last, string name, bool aliasFirstChild, T target, Setter<T> setter, List<DeferSetter> defer)
        {
            JToken tok;
            JToken tokLast = null;
            bool found = false;
            if (!obj.TryGetValue(name, out tok))
            {
                if (aliasFirstChild && obj.TryGetValue("children", out tok))
                {
                    found = true;
                    tok = ((JArray)tok).First;
                }
            }
            else
            {
                found = true;
            }
            if (found)
            {
                if (last != null && last.TryGetValue(name, out tokLast))
                {
                    if (tokLast.ToString() == tok.ToString())
                    {
                        return; // bail early if old & new are the same
                    }
                }
                if (defer != null) 
                {
                    defer.Add(new DeferSetter<T>() { setter = setter, target = target, tok = tok, tokLast = tokLast });
                }
                else 
                {
                    setter(target, tok, tokLast);
                }
            }
        }
        static void TrySetEvent<T>(JObject obj, JObject last, string name, T target, Setter<T> setter)
        {
            JToken tok;
            JToken tokLast = null;
            if (obj.TryGetValue("on" + name, out tok))
            {
                if (last != null && last.TryGetValue("on" + name, out tokLast))
                {
                    if (tokLast.ToString() == tok.ToString())
                    {
                        return; // bail early if old & new are the same
                    }
                }
                setter(target, tok, tokLast);
            }
        }
        static T ParseEnum<T>(JToken v) 
        {
            return (T)Enum.Parse(typeof(T), v.ToString());
        }
        static T XamlStringParse<T>(JToken v)
        {
            return (T)Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(T), v.ToString());
        }
        static Dictionary<string, CreateCallback> GetHandlers()
        {
            if (handlers == null)
            {
                handlers = new Dictionary<string, CreateCallback>();
<# foreach (var name in publicHandlerNames) { #>
                handlers["<#= name #>"] = <#= name #>Handler.Create;
<# } #>
            }
            return handlers;
        }
        internal static DependencyObject CreateFromState(JToken item, JToken lastItem, Dictionary<string, object> namedObjectMap, List<DeferSetter> defer)
        {
            if (item.Type == JTokenType.Object)
            {
                var type = item["type"].ToString();
                CreateCallback create;
                if (GetHandlers().TryGetValue(type, out create))
                {
                    return create((JObject)item, (JObject)lastItem, namedObjectMap, defer);
                }
                return new TextBlock() { FontSize = 48, Text = "'" + type + "'Not found" };
            }
            else
            {
                return new TextBlock() { Text = item.ToString() };
            }
        }

        internal delegate void Setter<T>(T target, JToken value, JToken lastValue);
        delegate DependencyObject CreateCallback(JObject obj, JObject lastObj, Dictionary<string, object> namedObjectMap, List<DeferSetter> defer);

        internal abstract class DeferSetter
        {
            public abstract void Do();
        }
        internal class DeferSetter<T> : DeferSetter
        {
            internal T target;
            internal JToken tok;
            internal JToken tokLast;
            internal Setter<T> setter;

            public override void Do()
            {
                setter(target, tok, tokLast);
            }
        }

    }
}

<#+
List<string> publicHandlerNames = new List<string>();

class PropEntry {
    public string Name;
    public bool AliasFirstChild = false;
    public bool Defer = false;
    public string SetBody;
}
class EventEntry {
    public string Name;
    public string WinRTName;
    public string EventType;
}
string CamelCase(string name) {
    return Char.ToLowerInvariant(name[0]) + name.Substring(1);
}
PropEntry EnumProperty(string name) {
    return new PropEntry() { Name=CamelCase(name), SetBody="target." + name + " = ParseEnum<" + name + ">(x)" };
}
PropEntry XamlProperty(string name, string typeName) {
    return new PropEntry() { Name=CamelCase(name), SetBody="target." + name + " = XamlStringParse<" + typeName + ">(x)" };
}
PropEntry StringProp(string name) {
    return new PropEntry() { Name=CamelCase(name), SetBody="target." + name + " = x.ToString()" };
}
PropEntry DefaultStringProp(string name) {
    return new PropEntry() { Name=CamelCase(name), AliasFirstChild=true, SetBody="target." + name + " = x.ToString()" };
}
PropEntry BasicProp(string name, string setter) {
    return new PropEntry() { Name=CamelCase(name), SetBody="target." + name + " = " + setter };
}
PropEntry DefaultBasicProp(string name, string setter) {
    return new PropEntry() { Name=CamelCase(name), AliasFirstChild=true, SetBody="target." + name + " = " + setter };
}
PropEntry DoubleProp(string name) {
    return new PropEntry() { Name=CamelCase(name), SetBody="target." + name + " = x.Value<double>()" };
}
PropEntry BooleanProp(string name) {
    return new PropEntry() { Name=CamelCase(name), SetBody="target." + name + " = Convert.ToBoolean(((JValue)x).Value)" };
}
PropEntry BooleanAttachedProp(string winRTPropName, string shortProvider, string winRTProvider) {
    return new PropEntry() { Name=shortProvider + "$" + CamelCase(winRTPropName), SetBody="target.SetValue("+winRTProvider+"."+winRTPropName+"Property, Convert.ToBoolean(Convert.ToBoolean(((JValue)x).Value)))" };
}
PropEntry RefAttachedProp(string winRTPropName, string shortProvider, string winRTProvider) {
    return new PropEntry() { 
        Name=shortProvider + "$" + CamelCase(winRTPropName), 
        SetBody="target.SetValue("+winRTProvider+"."+winRTPropName+"Property, namedObjectMap[x.ToString()])",
        Defer = true
    };
}
void ClassDef(string name, bool isPublic, string baseTypeName, PropEntry[] props, EventEntry[] events) {
    if (isPublic) { publicHandlerNames.Add(name); }
    PushIndent("    ");
    PushIndent("    ");
    WriteLine("internal static class " + name + "Handler");
    WriteLine("{");
    PushIndent("    ");
    if (isPublic) {
        Create(name);
    }
    PropSetter(name, baseTypeName, props, events);
    if (events != null) {
        foreach (var e in events) {
            EventHandler(e.WinRTName, e.EventType, name);
        }
    }
    PopIndent();
    WriteLine("}");
    PopIndent();
    PopIndent();
}
void Create(string name) {
    WriteLine("internal static " + name + " Create(JObject obj, JObject lastObj, Dictionary<string, object> namedObjectMap, List<DeferSetter> defer)");
    WriteLine("{");
    PushIndent("    ");
    WriteLine("var createResult = CreateOrGetLast<" + name + ">(obj, namedObjectMap);");
    WriteLine("SetProperties(createResult.Item2, obj, createResult.Item1 ? lastObj : null, namedObjectMap, defer);");
    WriteLine("return createResult.Item2;");
    PopIndent();
    WriteLine("}");
}
void PropSetter(string name, string baseTypeName, PropEntry[] props, EventEntry[] events) {
    WriteLine("internal static void SetProperties(" + name + " t, JObject obj, JObject lastObj, Dictionary<string, object> namedObjectMap, List<DeferSetter> defer)");
    WriteLine("{");
    PushIndent("    ");
    if (baseTypeName != null && baseTypeName.Length > 0)
    {
        WriteLine(baseTypeName + "Handler.SetProperties(t, obj, lastObj, namedObjectMap, defer);");
    }
    if (props != null) {
        foreach (var prop in props) {
            string deferArg = "";
            if (prop.Defer) {
                deferArg = ", defer";
            }
            if (prop.AliasFirstChild) {
                WriteLine("TrySet(obj, lastObj, \"" + prop.Name + "\", true, t, (target, x, lastX) => " + prop.SetBody + deferArg + ");");
            }
            else {
                WriteLine("TrySet(obj, lastObj, \"" + prop.Name + "\", false, t, (target, x, lastX) => " + prop.SetBody + deferArg + ");");
            }
        }
    }
    if (events != null) {
        foreach (var e in events) {
            WriteLine("TrySetEvent(obj, lastObj, \"" + e.Name + "\", t, (target, x, lastX) => Set"+e.WinRTName+"EventHandler(x.ToString(), target));");
        }
    }
                
    PopIndent();
    WriteLine("}");
}

void EventHandler(string eventName, string eventTypeName, string typeName) {
    WriteLine("static void "+eventName+"Router(object sender, "+eventTypeName+" e)");
    WriteLine("{");
    PushIndent("    ");
    WriteLine("if (Command != null)");
    WriteLine("{");
    PushIndent("    ");
    WriteLine("var map = (Dictionary<string, string>)((FrameworkElement)sender).GetValue(eventMap);");
    WriteLine("Command(null, new CommandEventArgs() { CommandHandlerToken = map[\""+eventName+"\"], Sender = sender, EventArgs = e });");
    PopIndent();
    WriteLine("}");
    PopIndent();
    WriteLine("}");

    WriteLine("static void Set"+eventName+"EventHandler(string handlerName, "+typeName+" element)");
    WriteLine("{");
    PushIndent("    ");
    WriteLine("var map = (Dictionary<string, string>)element.GetValue(eventMap);");
    WriteLine("if (map == null)");
    WriteLine("{");
    PushIndent("    ");
    WriteLine("element.SetValue(eventMap, map = new Dictionary<string, string>());");
    PopIndent();
    WriteLine("}");
    WriteLine("map[\""+eventName+"\"] = handlerName;");
    // remove to avoid duplicates   
    //
    WriteLine("element."+eventName+" -= "+eventName+"Router;");
    WriteLine("element."+eventName+" += "+eventName+"Router;");
    PopIndent();
    WriteLine("}");
}
#>
