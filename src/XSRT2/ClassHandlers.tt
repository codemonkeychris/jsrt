<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Windows.UI.Xaml.Media;
using Windows.UI;
using Windows.UI.Text;
using System.Reflection;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Media.Animation;
using Windows.UI.Xaml.Automation;
using Windows.UI.Xaml.Automation.Peers;

namespace XSRT2 {
    public static class Handler
    {
        <#
        ClassDef(
            "FrameworkElement", 
            false,
            null,
            // UNDONE: what is the scalable story for attached properties?
            //
            new PropEntry[] { 
                // UNDONE: rest of grid
                //
                new PropEntry() { Name="grid$row", SetBody="{ target.SetValue(Grid.RowProperty, Convert.ToInt32(x.Value<double>())); }" },
                new PropEntry() { Name="grid$rowSpan", SetBody="{ target.SetValue(Grid.RowSpanProperty, Convert.ToInt32(x.Value<double>())); }" },
                new PropEntry() { Name="grid$column", SetBody="{ target.SetValue(Grid.ColumnProperty, Convert.ToInt32(x.Value<double>())); }" },
                new PropEntry() { Name="grid$columnSpan", SetBody="{ target.SetValue(Grid.ColumnSpanProperty, Convert.ToInt32(x.Value<double>())); }" },

                // UNDONE: rest of accessibility
                //
                new PropEntry() { Name="automationId", SetBody="{ AutomationProperties.SetAutomationId(target, x.ToString()); }" },
                new PropEntry() { Name="acc$helpText", SetBody="{ AutomationProperties.SetHelpText(target, x.ToString()); }" },
                RefAttachedProp("LabeledBy", "acc", "AutomationProperties"),
                EnumAttachedProperty("LiveSetting", "acc", "AutomationProperties", "AutomationLiveSetting"),
                new PropEntry() { Name="acc$name", SetBody="{ AutomationProperties.SetName(target, x.ToString()); }" },

                // This is all of relativePanel
                //
                RefAttachedProp("Above", "relative", "RelativePanel"),
                RefAttachedProp("AlignBottomWith", "relative", "RelativePanel"),
                BooleanAttachedProp("AlignBottomWithPanel", "relative", "RelativePanel" ),
                RefAttachedProp("AlignHorizontalCenterWith", "relative", "RelativePanel"),
                RefAttachedProp("AlignLeftWith", "relative", "RelativePanel"),
                BooleanAttachedProp("AlignLeftWithPanel", "relative", "RelativePanel" ),
                RefAttachedProp("AlignRightWith", "relative", "RelativePanel"),
                BooleanAttachedProp("AlignRightWithPanel", "relative", "RelativePanel" ),
                RefAttachedProp("AlignTopWith", "relative", "RelativePanel"),
                BooleanAttachedProp("AlignTopWithPanel", "relative", "RelativePanel" ),
                RefAttachedProp("AlignVerticalCenterWith", "relative", "RelativePanel"),
                BooleanAttachedProp("AlignVerticalCenterWithPanel", "relative", "RelativePanel" ),
                RefAttachedProp("Below", "relative", "RelativePanel"),
                RefAttachedProp("LeftOf", "relative", "RelativePanel"),
                RefAttachedProp("RightOf", "relative", "RelativePanel"),
                
                // UNDONE: rest of framework element
                //
                EnumProperty("HorizontalAlignment"),
                EnumProperty("VerticalAlignment"),
                XamlProperty("Margin", "Thickness"),
                new PropEntry() { Name="name", SetBody="{ target.Name = x.ToString(); }" }
            },
            null
        ); 
        #>

        <#
        ClassDef(
            "TextBlock",
            true,
            "FrameworkElement",
            new PropEntry[] {
                DefaultStringProp("Text"),
                BasicProp("FontFamily", "new FontFamily(x.ToString())"),
                DoubleProp("FontSize"),
                XamlProperty("FontWeight", "FontWeight")
            },
            null
        );
        #>

        <#
        ClassDef(
            "TextBox",
            true,
            "Control",
            new PropEntry[] {
                DefaultStringProp("Text")
            },
            new EventEntry[] {
                new EventEntry() { Name="TextChanged", WinRTName="TextChanged", EventType="RoutedEventArgs" }
            }
        );
        #>

        <#
        ClassDef(
            "GridView",
            true,
            "ListViewBase",
            new PropEntry[] {
            },
            new EventEntry[] {
            }
        );
        #>

        <#
        ClassDef(
            "ListView",
            true,
            "ListViewBase",
            new PropEntry[] {
            },
            new EventEntry[] {
            }
        );
        #>

        <#
        ClassDef(
            "ListViewBase",
            false,
            "Selector",
            new PropEntry[] {
            },
            new EventEntry[] {
            }
        );
        #>
        
        <#
        ClassDef(
            "ComboBox",
            true,
            "Selector",
            new PropEntry[] {
            },
            new EventEntry[] {
            }
        );
        #>
        
        <#
        ClassDef(
            "ListBox",
            true,
            "Selector",
            new PropEntry[] {
            },
            new EventEntry[] {
            }
        );
        #>

        <#
        ClassDef(
            "Selector",
            false,
            "ItemsControl",
            new PropEntry[] {
                new PropEntry() { Name="selectedItem", SetBody="{ target.SelectedItem = CreateForObjectType(x, lastX, context); }" }
            },
            new EventEntry[] {
                new EventEntry() { Name="SelectionChanged", WinRTName="SelectionChanged", EventType="SelectionChangedEventArgs" }
            }
        );
        #>

        <#
        ClassDef(
            "ItemsControl",
            false,
            "Control",
            new PropEntry[] {
                new PropEntry() { Name="itemsSource", SetBody="{ SetItemsSource(target, x, lastX, context); }" },
                new PropEntry() { Name="itemContainerTransitions", SetBody="{ SetItemContainerTransitions(target, x, lastX, context); }" }
            },
            new EventEntry[] {
            }
        );
        #>

        <#
        ClassDef(
            "RangeBase",
            false,
            "Control",
            new PropEntry[] {
            DoubleProp("Minimum"),
            DoubleProp("Maximum"),
            DoubleProp("Value")
            },
            new EventEntry[] {
                new EventEntry() { Name="ValueChanged", WinRTName="ValueChanged", EventType="RangeBaseValueChangedEventArgs" }
            }
        );
        #>

        // UNDONE: Content property (and others) now will recreate when child props change instead of incremental
        // update now that we drop "lastNamedObjectMap" on the floor and track references... 
        // 
        <# ClassDef("Button", true, "ButtonBase", null, null); #>
        <# ClassDef("CalendarDatePicker", true, "Control", null, null); #>
        <# ClassDef("CalendarView", true, "Control", null, null); #>
        <# ClassDef("RelativePanel", true, "Panel", null, null); #>
        <# ClassDef("RepositionThemeTransition", true, null, null, null); #>
        <# ClassDef("ProgressBar", true, "RangeBase", null, null); #>
        <# ClassDef("Slider", true, "RangeBase", null, null); #>
        

        <#
        ClassDef(
            "CheckBox",
            true,
            "ButtonBase",
            new PropEntry[] {
            BooleanProp("IsChecked")
            },
            new EventEntry[] {
                new EventEntry() { Name="Checked", WinRTName="Checked", EventType="RoutedEventArgs" }
            }
        );
        #>

        <#
        ClassDef(
            "ButtonBase",
            false,
            "Control",
            new PropEntry[] {
                DefaultBasicProp("Content", "CreateFromState(x, lastX, context)")
            },
            new EventEntry[] {
                new EventEntry() { Name="Click", WinRTName="Click", EventType="RoutedEventArgs" }
            }
        );
        #>

        <#
        ClassDef(
            "Control",
            false,
            "FrameworkElement",
            new PropEntry[] {
                XamlProperty("Background", "Brush"),
                XamlProperty("Foreground", "Brush"),
                BasicProp("FontFamily", "new FontFamily(x.ToString())"),
                DoubleProp("FontSize"),
                EnumProperty("FontWeight")
            },
            null
        );
        #>

        <# ClassDef("StackPanel", true, "Panel", null, null); #>
        <# 
        ClassDef(
            "Grid", 
            true, 
            "Panel", 
            new PropEntry[] {
                    new PropEntry() { Name="rows", SetBody="{ PanelHandler.SetGridRowDefinitions(target, (JArray)x); }" },
                    new PropEntry() { Name="columns", SetBody="{ PanelHandler.SetGridColumnDefinitions(target, (JArray)x); }" }
                },
                null
        ); 
        #>

        internal static class PanelHandler
        {
            internal static void SetGridRowDefinitions(Grid t, JArray obj) 
            {
                t.RowDefinitions.Clear();
                foreach (var d in obj.AsJEnumerable())
                {
                    RowDefinition rd = new RowDefinition();
                    rd.Height = XamlStringParse<GridLength>(d);
                    t.RowDefinitions.Add(rd);
                }
            }
            internal static void SetGridColumnDefinitions(Grid t, JArray obj) 
            {
                t.ColumnDefinitions.Clear();
                foreach (var d in obj.AsJEnumerable())
                {
                    ColumnDefinition cd = new ColumnDefinition();
                    cd.Width = XamlStringParse<GridLength>(d);
                    t.ColumnDefinitions.Add(cd);
                }
            }

            static void SetPanelChildren(Panel t, JObject obj, JObject lastObj, DiffContext context)
            {
                Handler.FrameworkElementHandler.SetProperties(t, obj, lastObj, context);
                List<UIElement> children = new List<UIElement>();
                IJEnumerable<JToken> lastChildren = null;
                JToken last;
                if (lastObj != null && lastObj.TryGetValue("children", out last))
                {
                    lastChildren = last.AsJEnumerable();
                }
                CollectPanelChildrenWorker(t, obj["children"].AsJEnumerable(), lastChildren, children, context);
                var setChildrenNeeded = false;
                if (t.Children.Count == children.Count)
                {
                    for (int i = 0; i < children.Count; i++)
                    {
                        if (!object.ReferenceEquals(children[i], t.Children[i]))
                        {
                            setChildrenNeeded = true;
                        }
                    }
                }
                else
                {
                    setChildrenNeeded = true;
                }

                if (setChildrenNeeded)
                {
                    // UNDONE: this step is to explicitly call "DisconnectChildrenRecursive"
                    // which appears to be neccessary for moving elements between containers
                    // however, it also leaves the elements non-rendering (in some cases)... 
                    //
                    List<UIElement> toRemove = new List<UIElement>();
                    foreach (var old in t.Children)
                    {
                        if (!children.Contains(old))
                        {
                            toRemove.Add(old);
                        }
                    }
                    foreach (var old in toRemove)
                    {
                        t.Children.Remove(old);
                        VisualTreeHelper.DisconnectChildrenRecursive(old);
                    }

                    t.Children.Clear();
                    foreach (var child in children)
                    {
                        DependencyObject visualParent = null;

                        var fe = child as FrameworkElement;
                        if (fe != null && fe.Parent != null)
                        {
                            visualParent = fe.Parent;
                        }
                        if (visualParent == null)
                        {
                            visualParent = VisualTreeHelper.GetParent(child);
                        }
                        var parentPanel = visualParent as Panel;
                        if (parentPanel != null)
                        {
                            parentPanel.Children.Remove(child);
                        }
                        t.Children.Add(child);
                    }
                }
            }
            static void CollectPanelChildrenWorker(Panel t, IJEnumerable<JToken> items, IEnumerable<JToken> lastItems, List<UIElement> children, DiffContext context)
            {
                IEnumerator<JToken> enumerator = null;
                if (lastItems != null)
                {
                    enumerator = lastItems.GetEnumerator();
                    enumerator.Reset();
                }
                if(items != null)
                {
                    foreach (var child in items)
                    {
                        JToken lastChild = null;
                        if (enumerator != null && enumerator.MoveNext()) { lastChild = enumerator.Current; }

                        if (child.Type == JTokenType.Array)
                        {
                            CollectPanelChildrenWorker(t, child.AsJEnumerable(), lastChild != null ? lastChild.AsJEnumerable() : null, children, context);
                        }
                        else
                        {
                            var instance = CreateFromState((JObject)child, lastChild as JObject, context);
                            children.Add((FrameworkElement)instance);
                        }
                    }
                }
            }
            internal static void SetProperties(Panel t, JObject obj, JObject lastObj, DiffContext context)
            {
                FrameworkElementHandler.SetProperties(t, obj, lastObj, context);
                SetPanelChildren(t, obj, lastObj, context);
                TrySet(context, obj, lastObj, "childrenTransitions", false, t, (target, x, lastX) => { SetChildrenTransitions(target, x, lastX, context); });
            }

        }


        static DependencyProperty eventMap = DependencyProperty.RegisterAttached("XSEventMap", typeof(Dictionary<string, string>), typeof(FrameworkElement), PropertyMetadata.Create((object)null));
        static Dictionary<string, CreateCallback> handlers;

        public static event EventHandler<CommandEventArgs> Command;


        delegate void SetCollectionPropertyCallback<TObject, TValue>(TObject target, List<TValue> items);
        internal static void SetItemContainerTransitions(ItemsControl control, JToken obj, JToken last, Handler.DiffContext context)
        {
            SetCollectionProperty<ItemsControl, Transition>(
                control,
                "itemContainerTransitions",
                obj,
                last,
                context,
                (target, list) =>
                {
                    target.ItemContainerTransitions.Clear();
                    foreach (var child in list)
                    {
                        target.ItemContainerTransitions.Add(child);
                    }
                });

        }
        internal static void SetChildrenTransitions(Panel control, JToken obj, JToken last, Handler.DiffContext context)
        {
            SetCollectionProperty<Panel, Transition>(
                control,
                "itemContainerTransitions",
                obj,
                last,
                context,
                (target, list) =>
                {
                    TransitionCollection col = target.ChildrenTransitions;
                    if (col == null)
                    {
                        target.ChildrenTransitions = col = new TransitionCollection();
                    }
                    else
                    {
                        col.Clear();
                    }
                    foreach (var child in list)
                    {
                        col.Add(child);
                    }
                });

        }

        static void SetCollectionProperty<TObject, TValue>(
            TObject t, 
            string propertyName,
            JToken obj,
            JToken lastObj,
            Handler.DiffContext context, 
            SetCollectionPropertyCallback<TObject, TValue> setter) where TValue : DependencyObject
        {
            List<TValue> children = new List<TValue>();
            IJEnumerable<JToken> lastChildren = null;
            if (lastObj != null)
            {
                lastChildren = lastObj.AsJEnumerable();
            }
            CollectItemsWorker(t, obj.AsJEnumerable(), lastChildren, children, context);
            // UNDONE: better diff
            //
            var setChildrenNeeded = true;

            if (setChildrenNeeded)
            {
                setter(t, children);
            }
        }
        static void CollectItemsWorker<TObject, TValue>(
            TObject t, 
            IJEnumerable<JToken> items, 
            IEnumerable<JToken> lastItems, 
            List<TValue> children,
            Handler.DiffContext context) where TValue : DependencyObject
        {
            IEnumerator<JToken> enumerator = null;
            if (lastItems != null)
            {
                enumerator = lastItems.GetEnumerator();
                enumerator.Reset();
            }
            foreach (var child in items)
            {
                JToken lastChild = null;
                if (enumerator != null && enumerator.MoveNext()) { lastChild = enumerator.Current; }

                if (child.Type == JTokenType.Array)
                {
                    CollectItemsWorker(t, child.AsJEnumerable(), lastChild != null ? lastChild.AsJEnumerable() : null, children, context);
                }
                else
                {
                    var instance = Handler.CreateFromState((JObject)child, lastChild as JObject, context);
                    children.Add((TValue)instance);
                }
            }
        }

        internal static object CreateForObjectType(JToken obj, JToken objLast, Handler.DiffContext context)
        {
            switch (obj.Type)
            {
                case JTokenType.Float:
                    return obj.Value<double>();
                case JTokenType.Integer:
                    return obj.Value<int>();
                case JTokenType.String:
                    return obj.Value<string>();
                case JTokenType.Object:
                    var instance = Handler.CreateFromState((JObject)obj, objLast as JObject, context);
                    return instance;
                default:
                    return "Unhandled:" + Enum.GetName(typeof(JTokenType), obj.Type);
            }
        }

        internal static void SetItemsSource(ItemsControl control, JToken source, JToken lastSource, Handler.DiffContext context)
        {
            // UNDONE: need to do delta on previous version of the list
            //
            List<object> collection = new List<object>();
            if (source.Type == JTokenType.Array)
            {
                foreach (var child in source.AsJEnumerable())
                {
                    collection.Add(CreateForObjectType(child, lastSource, context));
                }
            }

            control.ItemsSource = collection;
        }

        static CreateResult<T> CreateOrGetLast<T>(JObject obj, DiffContext context) where T:new()
        {
            JToken name;
            string resolvedName = null;
            if (obj.TryGetValue("name", out name))
            {
                resolvedName = name.ToString();
            }
            else
            {
                resolvedName = context.CreateSurrogateName(obj);
            }

            if (resolvedName != null)
            { 
                object value;
                if (context.TryGetObject(resolvedName, out value))
                {
                    if (value != null && value is T)
                    {
                        return new CreateResult<T>() { Value = (T)value, Recycled = true, Name = resolvedName };
                    }
                }
            }
            context.ObjectCreateCount++;
            var instance = new T();
            context.AddObject(resolvedName, instance);
            return new CreateResult<T>() { Value = instance, Recycled = false, Name = resolvedName };
        }

        static void TrySet<T>(DiffContext context, JObject obj, JObject last, string name, T target, Setter<T> setter)
        {
            TrySet<T>(context, obj, last, name, false, target, setter);
        }
        static void TrySet<T>(DiffContext context, JObject obj, JObject last, string name, bool aliasFirstChild, T target, Setter<T> setter)
        {
            TrySet<T>(context, obj, last, name, aliasFirstChild, target, setter, null);
        }
        static void TrySet<T>(DiffContext context, JObject obj, JObject last, string name, bool aliasFirstChild, T target, Setter<T> setter, List<DeferSetter> defer)
        {
            JToken tok;
            JToken tokLast = null;
            bool found = false;
            if (!obj.TryGetValue(name, out tok))
            {
                if (aliasFirstChild && obj.TryGetValue("children", out tok))
                {
                    found = true;
                    tok = ((JArray)tok).First;
                }
            }
            else
            {
                found = true;
            }
            if (found)
            {
                if (last != null && last.TryGetValue(name, out tokLast))
                {
                    if (tokLast.ToString() == tok.ToString())
                    {
                        return; // bail early if old & new are the same
                    }
                }
                context.PropertySetCount++;
                if (defer != null) 
                {
                    defer.Add(new DeferSetter<T>() { setter = setter, target = target, tok = tok, tokLast = tokLast });
                }
                else 
                {
                    setter(target, tok, tokLast);
                }
            }
        }
        static void TrySetEvent<T>(DiffContext context, JObject obj, JObject last, string name, T target, Setter<T> setter)
        {
            JToken tok;
            JToken tokLast = null;
            if (obj.TryGetValue("on" + name, out tok))
            {
                if (last != null && last.TryGetValue("on" + name, out tokLast))
                {
                    if (tokLast.ToString() == tok.ToString())
                    {
                        return; // bail early if old & new are the same
                    }
                }
                context.EventSetCount++;
                setter(target, tok, tokLast);
            }
        }
        static T ParseEnum<T>(JToken v) 
        {
            return (T)Enum.Parse(typeof(T), v.ToString());
        }
        static T XamlStringParse<T>(JToken v)
        {
            return (T)Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(T), v.ToString());
        }
        static Dictionary<string, CreateCallback> GetHandlers()
        {
            if (handlers == null)
            {
                handlers = new Dictionary<string, CreateCallback>();
<# foreach (var name in publicHandlerNames) { #>
                handlers["<#= name #>"] = <#= name #>Handler.Create;
<# } #>
            }
            return handlers;
        }
        internal static DependencyObject CreateFromState(JToken item, JToken lastItem, DiffContext context)
        {
            if (item.Type == JTokenType.Object)
            {
                var type = item["type"].ToString();
                CreateCallback create;
                if (GetHandlers().TryGetValue(type, out create))
                {
                    return create((JObject)item, (JObject)lastItem, context);
                }
                return new TextBlock() { FontSize = 48, Text = "'" + type + "'Not found" };
            }
            else
            {
                return new TextBlock() { Text = item.ToString() };
            }
        }

        internal delegate void Setter<T>(T target, JToken value, JToken lastValue);
        delegate DependencyObject CreateCallback(JObject obj, JObject lastObj, DiffContext context);

        struct CreateResult<T> 
        {
            public T Value;
            public bool Recycled;
            public string Name;
        }
        internal abstract class DeferSetter
        {
            public abstract void Do();
        }
        internal class DeferSetter<T> : DeferSetter
        {
            internal T target;
            internal JToken tok;
            internal JToken tokLast;
            internal Setter<T> setter;

            public override void Do()
            {
                setter(target, tok, tokLast);
            }
        }
        internal class DiffContext 
        {
            Dictionary<string, object> lastNamedObjectMap;
            Dictionary<string, object> currentNamedObjectMap = new Dictionary<string, object>();
            // UNDONE: get smarter about surrogate key generation
            Dictionary<string, int> surrogateKeys = new Dictionary<string, int>();
            List<string> nameStack = new List<string>();

            internal DiffContext(Dictionary<string, object> lastNamedObjectMap)
            {
                this.lastNamedObjectMap = lastNamedObjectMap;
            }

            public List<DeferSetter> Defer;
            public int EventSetCount;
            public int PropertySetCount;
            public int ObjectCreateCount;
            public DateTime Start;
            public DateTime End;
                
            public Dictionary<String, object> GetNamedObjectMap() { return currentNamedObjectMap; }

            public object ReferenceObject(string name) 
            {
                object value;
                if (lastNamedObjectMap.TryGetValue(name, out value))
                {
                    currentNamedObjectMap[name] = value;
                    return value;
                }
                return null;
            }
            public bool TryGetObject(string name, out object value)
            {
                var ret = lastNamedObjectMap.TryGetValue(name, out value);
                if (ret) { currentNamedObjectMap[name] = value; }
                return ret;
            }
            public void AddObject(string name, object value)
            {
                lastNamedObjectMap[name] = currentNamedObjectMap[name] = value;
            }
            public string CreateSurrogateName(JObject obj) 
            { 
                string baseName = "xsrt";
                JToken t;
                if (obj.TryGetValue("type", out t))
                {
                    baseName = t.ToString();
                }
                int n = 0;
                if (surrogateKeys.TryGetValue(baseName, out n)) 
                {
                    n++;
                }
                surrogateKeys[baseName] = n;
                string key = baseName + n;

                var concat = nameStack.Count > 0 ? nameStack.Aggregate((a, b) => a + "-" + b) : "root";
                 
                return concat + "-" + key;
            }
            public void PushName(string name)
            {
                nameStack.Add(name);
            }
            public void PopName(string name)
            {
                var n = nameStack[nameStack.Count - 1];
                if (name != n) { throw new InvalidOperationException("unbalanced name"); }
                nameStack.RemoveAt(nameStack.Count - 1);
            }
        }
    }
}

<#+
List<string> publicHandlerNames = new List<string>();

class PropEntry {
    public string Name;
    public bool AliasFirstChild = false;
    public bool Defer = false;
    public string SetBody;
}
class EventEntry {
    public string Name;
    public string WinRTName;
    public string EventType;
}
string CamelCase(string name) {
    return Char.ToLowerInvariant(name[0]) + name.Substring(1);
}
PropEntry EnumProperty(string name) {
    return new PropEntry() { Name=CamelCase(name), SetBody="target." + name + " = ParseEnum<" + name + ">(x)" };
}
PropEntry EnumProperty(string name, string winRTTypeName) {
    return new PropEntry() { Name=CamelCase(name), SetBody="target." + name + " = ParseEnum<" + winRTTypeName + ">(x)" };
}
PropEntry XamlProperty(string name, string typeName) {
    return new PropEntry() { Name=CamelCase(name), SetBody="target." + name + " = XamlStringParse<" + typeName + ">(x)" };
}
PropEntry StringProp(string name) {
    return new PropEntry() { Name=CamelCase(name), SetBody="target." + name + " = x.ToString()" };
}
PropEntry DefaultStringProp(string name) {
    return new PropEntry() { Name=CamelCase(name), AliasFirstChild=true, SetBody="target." + name + " = x.ToString()" };
}
PropEntry BasicProp(string name, string setter) {
    return new PropEntry() { Name=CamelCase(name), SetBody="target." + name + " = " + setter };
}
PropEntry DefaultBasicProp(string name, string setter) {
    return new PropEntry() { Name=CamelCase(name), AliasFirstChild=true, SetBody="target." + name + " = " + setter };
}
PropEntry DoubleProp(string name) {
    return new PropEntry() { Name=CamelCase(name), SetBody="target." + name + " = x.Value<double>()" };
}
PropEntry BooleanProp(string name) {
    return new PropEntry() { Name=CamelCase(name), SetBody="target." + name + " = Convert.ToBoolean(((JValue)x).Value)" };
}
PropEntry EnumAttachedProperty(string winRTPropName, string shortProvider, string winRTProvider, string winRTEnumType) {
    return new PropEntry() { Name=shortProvider + "$" + CamelCase(winRTPropName), SetBody="target.SetValue("+winRTProvider+"."+winRTPropName+"Property, ParseEnum<" + winRTEnumType + ">(x))" };
}
PropEntry BooleanAttachedProp(string winRTPropName, string shortProvider, string winRTProvider) {
    return new PropEntry() { Name=shortProvider + "$" + CamelCase(winRTPropName), SetBody="target.SetValue("+winRTProvider+"."+winRTPropName+"Property, Convert.ToBoolean(Convert.ToBoolean(((JValue)x).Value)))" };
}
PropEntry RefAttachedProp(string winRTPropName, string shortProvider, string winRTProvider) {
    return new PropEntry() { 
        Name=shortProvider + "$" + CamelCase(winRTPropName), 
        SetBody="target.SetValue("+winRTProvider+"."+winRTPropName+"Property, context.ReferenceObject(x.ToString()))",
        Defer = true
    };
}
void ClassDef(string name, bool isPublic, string baseTypeName, PropEntry[] props, EventEntry[] events) {
    if (isPublic) { publicHandlerNames.Add(name); }
    PushIndent("    ");
    PushIndent("    ");
    WriteLine("internal static class " + name + "Handler");
    WriteLine("{");
    PushIndent("    ");
    if (isPublic) {
        Create(name);
    }
    PropSetter(name, baseTypeName, props, events);
    if (events != null) {
        foreach (var e in events) {
            EventHandler(e.WinRTName, e.EventType, name);
        }
    }
    PopIndent();
    WriteLine("}");
    PopIndent();
    PopIndent();
}
void Create(string name) {
    WriteLine("internal static " + name + " Create(JObject obj, JObject lastObj, DiffContext context)");
    WriteLine("{");
    PushIndent("    ");
    WriteLine("var createResult = CreateOrGetLast<" + name + ">(obj, context);");
    WriteLine("context.PushName(createResult.Name);");
    WriteLine("SetProperties(createResult.Value, obj, createResult.Recycled ? lastObj : null, context);");
    WriteLine("context.PopName(createResult.Name);");
    WriteLine("return createResult.Value;");
    PopIndent();
    WriteLine("}");
}
void PropSetter(string name, string baseTypeName, PropEntry[] props, EventEntry[] events) {
    WriteLine("internal static void SetProperties(" + name + " t, JObject obj, JObject lastObj, DiffContext context)");
    WriteLine("{");
    PushIndent("    ");
    if (baseTypeName != null && baseTypeName.Length > 0)
    {
        WriteLine(baseTypeName + "Handler.SetProperties(t, obj, lastObj, context);");
    }
    if (props != null) {
        foreach (var prop in props) {
            string deferArg = "";
            if (prop.Defer) {
                deferArg = ", context.Defer";
            }
            if (prop.AliasFirstChild) {
                WriteLine("TrySet(context, obj, lastObj, \"" + prop.Name + "\", true, t, (target, x, lastX) => " + prop.SetBody + deferArg + ");");
            }
            else {
                WriteLine("TrySet(context, obj, lastObj, \"" + prop.Name + "\", false, t, (target, x, lastX) => " + prop.SetBody + deferArg + ");");
            }
        }
    }
    if (events != null) {
        foreach (var e in events) {
            WriteLine("TrySetEvent(context, obj, lastObj, \"" + e.Name + "\", t, (target, x, lastX) => Set"+e.WinRTName+"EventHandler(x.ToString(), target));");
        }
    }
                
    PopIndent();
    WriteLine("}");
}

void EventHandler(string eventName, string eventTypeName, string typeName) {
    WriteLine("static void "+eventName+"Router(object sender, "+eventTypeName+" e)");
    WriteLine("{");
    PushIndent("    ");
    WriteLine("if (Command != null)");
    WriteLine("{");
    PushIndent("    ");
    WriteLine("var map = (Dictionary<string, string>)((FrameworkElement)sender).GetValue(eventMap);");
    WriteLine("Command(null, new CommandEventArgs() { CommandHandlerToken = map[\""+eventName+"\"], Sender = sender, EventArgs = e });");
    PopIndent();
    WriteLine("}");
    PopIndent();
    WriteLine("}");

    WriteLine("static void Set"+eventName+"EventHandler(string handlerName, "+typeName+" element)");
    WriteLine("{");
    PushIndent("    ");
    WriteLine("var map = (Dictionary<string, string>)element.GetValue(eventMap);");
    WriteLine("if (map == null)");
    WriteLine("{");
    PushIndent("    ");
    WriteLine("element.SetValue(eventMap, map = new Dictionary<string, string>());");
    PopIndent();
    WriteLine("}");
    WriteLine("map[\""+eventName+"\"] = handlerName;");
    // remove to avoid duplicates   
    //
    WriteLine("element."+eventName+" -= "+eventName+"Router;");
    WriteLine("element."+eventName+" += "+eventName+"Router;");
    PopIndent();
    WriteLine("}");
}
#>
